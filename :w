(ns ^:figwheel-always vanvis.core
    (:require [cljs.core.async :as async
               :refer [<! >! chan put! timeout]]
              [goog.events :as events]
              [goog.dom :as dom])
    (:require-macros [cljs.core.async.macros :refer [go]]))

(enable-console-print!)

(defonce app-state (atom {:drawing false}))

(defn draw [x y context color scale]
  (. context (beginPath))
  (let [xPos (ceil (/ x scale) * scale)
        yPos (ceil (/ y scale) * scale)]
    (. context (moveTo xPos yPos))
    (set! (.-fillStyle context) color)
    (. context (fillRect xPos yPos scale scale))))

(defn canvas-adjust [context]
  (set! (.. context -canvas -width) (.-innerWidth js/window))
  (set! (.. context -canvas -height) (.-innerHeight js/window)))

(defn listen [el type]
  (let [c (chan)]
    (events/listen el type #(put! c %))
    c))

(defn bind-events [el out]
  (let [mv (listen el "mousemove")
        md (listen el "mousedown")
        mu (listen el "mouseup")
        msg :draw-end]
    (go (while true
          (let [[v d] (alts! [mv md mu])]
            (condp = d
              md (swap! app-state assoc :drawing true)
              mv (when (:drawing @app-state)
                   (draw (.-offsetX v) (.-offsetY v) out "#000" 5))
              mu (swap! app-state assoc :drawing false)
            ))))))

(defn setup []
  (let [canvas (dom/getElement "canvas")
        context (. canvas (getContext "2d"))
        scale 5]
    (canvas-adjust context)
    (bind-events canvas context)))

(setup)
;; define your app data so that it doesn't get over-written on reload

